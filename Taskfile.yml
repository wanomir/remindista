version: 3

silent: true
dotenv: [".env"]

vars:
  TAG: "{{ .TAG }}"
  DOCKER_DIR_SETUP: --file ./deploy/docker/docker-compose-{{OS}}.yml --project-directory ./

  SSL_CERT_PATH: "{{ .SSL_CERT_PATH }}"
  SSL_KEY_PATH: "{{ .SSL_KEY_PATH }}"

  PG_CONT_NAME: remindista-postgres-1
  DB_MIGRATIONS_DIR: ./db/migrations

  TOOL_BIN_DIR: ./bin/tools

  TOOL_LINT_SRC: github.com/golangci/golangci-lint/cmd/golangci-lint@latest
  TOOL_LINT: ./{{ .TOOL_BIN_DIR }}/golangci-lint

  TOOL_GO_IMPORTS_SRC: golang.org/x/tools/cmd/goimports@latest
  TOOL_GO_IMPORTS: ./{{ .TOOL_BIN_DIR }}/goimports

  TOOL_GOFUMPT_SRC: mvdan.cc/gofumpt@latest
  TOOL_GOFUMPT: ./{{ .TOOL_BIN_DIR }}/gofumpt

  TOOL_PROTO_SRC: google.golang.org/protobuf/cmd/protoc-gen-go@latest
  TOOL_PROTO: ./{{ .TOOL_BIN_DIR }}/protoc-gen-go

  TOOL_GRPC_SRC: google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
  TOOL_GRPC: ./{{ .TOOL_BIN_DIR }}/protoc-gen-go-grpc

  TOOL_MOCKS_SRC: github.com/vektra/mockery/v2@latest
  TOOL_MOCKS: ./{{ .TOOL_BIN_DIR }}/mockery

  TOOL_GOOSE_SRC: github.com/pressly/goose/v3/cmd/goose@latest
  TOOL_GOOSE: ./{{ .TOOL_BIN_DIR }}/goose

  TOOL_SWAGGO_SRC: github.com/swaggo/swag/cmd/swag@latest
  TOOL_SWAGGO: ./{{ .TOOL_BIN_DIR }}/swag

  PROTO_SRC: ./schemas/proto

tasks:
  default:
    cmds:
      - task: run

  run:
    deps: [tools:install]
    cmds:
      - task: fmt
      - task: lint
      - task: logs:clear
      - task: swag:init
      - task: docker:up

  build:bin:
    desc: Build binary executable
    cmds:
      - task: fmt
      - task: lint
      - echo '>>> Build binary for {{OS}}'
      - go build -o ./bin/{{OS}} ./cmd/app

  build:linux-arm:
    desc: Build binary executable for Linux arm
    cmds:
      - task: fmt
      - task: lint
      - echo '>>> Build binary for Linux arm'
      - GOOS=linux GOARCH=arm go build -o ./bin/linux-arm ./cmd/app

  build:linux-amd:
    desc: Build binary executable for Linux arm
    cmds:
      - task: fmt
      - task: lint
      - echo '>>> Build binary for Linux arm'
      - GOOS=linux GOARCH=amd64 go build -o ./bin/linux-amd ./cmd/app

  ssl:copy:
    desc: Copy SSL certificates
    cmds:
      - echo '>>> Copy SSL certificates'
      - cp {{ .SSL_CERT_PATH }} ./server.crt
      - cp {{ .SSL_KEY_PATH }} ./server.key

  swag:init:
    desc: Generate swagger docks
    cmds:
      - echo '>>> Generate Swagger docs'
      - "{{ .TOOL_SWAGGO }}  init --parseDependency -g ./cmd/app/main.go"

  docker:up:
    desc: Run docker services
    cmds:
      - echo '>>> Docker compose up'
      - docker compose {{ .DOCKER_DIR_SETUP }} up --build --force-recreate
    env:
      TAG: "{{ .TAG }}"

  docker:down:
    desc: Shutdown docker services
    cmds:
      - echo '>>> Docker compose down'
      - docker compose {{ .DOCKER_DIR_SETUP }}  down --remove-orphans --volumes

  docker:restart:
    desc: Shutdown docker services and start again.
    cmds:
      - task: docker:down
      - task: docker:up

  docker:clean:
    desc: Free docker resources
    cmds:
      - docker image prune --all && docker volume prune --all && docker container prune && docker system prune

  logs:dump:
    desc: Dump docker logs
    cmds:
      - echo '>>> Docker compose logs'
      - docker compose {{ .DOCKER_DIR_SETUP }} logs &> .log

  logs:clear:
    desc: Clear logs file
    cmds:
      - echo '>>> Clear logs'
      - echo '' > .log

  db:backup:
    desc: Push database backup copy.
    cmds:
      - echo '>>> Backup database'
      - git pull
      - task: postgres:dump
      - git add ./db/create_tables.sql && git commit -m "postgres dump $(date)" && git push

  postgres:dump:
    desc: Dump Postgres data
    cmds:
      - echo '>>> Dump Postgres'
      - "docker exec -i {{.PG_CONT_NAME}} /bin/sh -c
        'PGPASSWORD={{.PG_PASSWORD}} pg_dump --username {{.PG_USER}} {{.PG_DATABASE}}'
        > ./db/create_tables.sql"

  tools:install:
    env:
      GOBIN: "{{ .TASKFILE_DIR }}/{{ .TOOL_BIN_DIR }}"
    desc: Run tools install
    cmds:
      - echo '>>> Run install tools'
      - mkdir -p {{ .TOOL_BIN_DIR }}
      - go install {{ .TOOL_LINT_SRC }}
      - go install {{ .TOOL_GO_IMPORTS_SRC }}
      - go install {{ .TOOL_GOFUMPT_SRC }}
      - go install {{ .TOOL_PROTO_SRC }}
      - go install {{ .TOOL_GRPC_SRC }}
      - go install {{ .TOOL_MOCKS_SRC }}
      - go install {{ .TOOL_GOOSE_SRC }}
      - go install {{ .TOOL_SWAGGO_SRC }}
    status:
      - test -f {{ .TOOL_LINT }}
      - test -f {{ .TOOL_GO_IMPORTS }}
      - test -f {{ .TOOL_GOFUMPT }}
      - test -f {{ .TOOL_PROTO }}
      - test -f {{ .TOOL_GRPC }}
      - test -f {{ .TOOL_MOCKS }}
      - test -f {{ .TOOL_GOOSE }}
      - test -f {{ .TOOL_SWAGGO }}

  tools:clear:
    desc: Remove installed tools binaries
    cmds:
      - echo '>>> Run clear tools'
      - rm -rf {{ .TOOL_BIN_DIR }}

  go:tidy:
    desc: Run go mod tidy
    run: once
    cmds:
      - echo '>>> Run go get ./..'
      - go get -x ./...
      - echo '>>> Run go tidy'
      - go mod tidy

  lint:
    desc: Run static analysis
    cmds:
      - echo '>>> Run lint'
      - "{{ .TOOL_LINT }} run --fix"

  migrate:up:
    desc: Apply all available migrations
    cmds:
      - echo '>>> Migrate up'
      - "{{ .TOOL_GOOSE }} -dir {{ .DB_MIGRATIONS_DIR }} up"

  migrate:down:
    desc: Roll back a single migration from the current version
    cmds:
      - echo '>>> Migrate down'
      - "{{ .TOOL_GOOSE }} -dir {{ .DB_MIGRATIONS_DIR }} down"

  generate:
    desc: Generate code
    cmds:
      - task: generate:go
      #      - task: generate:proto
      - task: fmt

  generate:go:
    desc: Generate go
    env:
      SEARCH_BIN_PATH:
        sh: "echo `pwd`/{{ .TOOL_BIN_DIR }}:$PATH"
    cmds:
      - echo ">>> Go generate ./..."
      - PATH=$SEARCH_BIN_PATH go generate ./...

  #  generate:proto:
  #    desc: Generate protobuf
  #    env:
  #      SEARCH_BIN_PATH:
  #        sh: "echo `pwd`/{{ .TOOL_BIN_DIR }}:$PATH"
  #    cmds:
  #      - echo ">>> proto"
  #      - "PATH=$SEARCH_BIN_PATH {{ .PROTOC }}
  #           --proto_path=. \
  #           --go_out=. \
  #           --go_opt=module=studentgit.kata.academy/movie-recommendation-platform/kt-bot \
  #           --go-grpc_out=. \
  #           --go-grpc_opt=module=studentgit.kata.academy/movie-recommendation-platform/kt-bot \
  #           {{ .PROTO_SRC }}/grpc/*.proto"

  fmt:
    desc: Safe formatting codebase
    cmds:
      - echo ">>> Run Code Formatter"
      - go fmt $(go list ./... | grep -v /vendor)
      - "{{ .TOOL_GOFUMPT }} -l -w ."
      - "{{ .TOOL_GO_IMPORTS }} -w ."

  # copy:options:
  #   desc: Copy options
  #   cmds:
  #     - echo '>>> Copy options file from remote server'
  #     - scp root@$SERVER_IP:/home/wanomir/kt-bot/app_data/options.json ./app_data/
